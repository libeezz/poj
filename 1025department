#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<vector>

struct Room
{
    bool busy,waitQueue[26];
    int queueLength;
}room[11][11];

struct Visit
{
    int roomNumber,duration;
};

struct ListOfAllAgents
{
    int startTime,listAmount,listCounter;
    vector<Visit> visitList;
}list[26];

struct ActionLog
{
    int actionType,startTime,endTime,startRoomNumber,endRoomNumber;
};


struct Record
{
    vector<ActionLog> actionLog;
    int logCounter;
}record[26];

int init(){
    for(int i=0;i<26;i++){
        if(list[i].listAmount==0)continue;
        ActionLog temp=0;
        temp.actionType=1;
        temp.startTime=list[i].startTime;
        temp.endTime=temp.endTime;
        temp.startRoomNumber=0;
        if(list[i].visitList[0].roomNumber/100>1)temp.endRoomNumber=100;
        else temp.endRoomNumber=list[i].visitList[0].roomNumber;
        record[i].visitLog.push_back(temp);
    }
    return 0;
}
int entry(int id){
    room[list[id].visitList[0].roomNumber/100][list[id].visitList[0].roomNumber%100].waitQueue[id]=true;
    room[list[id].visitList[0].roomNumber/100][list[id].visitList[0].roomNumber%100].queueLength++;
    record[id].actionLog[record[id].logCounter].endtime+=30;
    
    ActionLog temp;
    if(list[id].visitList[0].roomNumber/100>1){
        temp.actionType=2;
        temp.startRoomNumber=100;
        temp.endRoomNumber=100;
    }
    else{
        temp.actionType=3;
        temp.startRoomNumber=list[id].visitList[0].roomNumber;
        temp.endRoomNumber=list[id].visitList[0].roomNumber;
    }
    temp.startTime=record[id].actionLog[record[id].logCounter].endtime;
    temp.endTime=temp.startTime;
    record[id].actionLog.push_back(temp);
    record[id].logCounter++;
    return 0;
}
int cacul(){
    while(1){
        int earliestTime=24*3600,id=26;
        for(int i=0;i<26;i++){
            if(list[i].listAmount=0)continue;
            if(record[i].actionLog[record[i].logCounter].actionType=9)continue;
            if(record[i].actionLog[record[i].logCounter].endTime<earliestTime){
                earliestTime=record[i].actionLog[record[i].logCounter].endTime;
                id=i;
            }   
        }
        if(id==26)return 0;
        switch (record[id].actionLog[record[id].logCounter].actionType)
        {
        case 1:
            entry(id);
            break;
        case 2:
            waitElevator(id);
            break;
        case 3:
            waitRoom(id);
            break;
        case 4:
            roomToRoom(id);
            break;
        case 5:
            elevatorToRoom(id);
            break;
        case 6:
            roomToElevator(id);
            break;
        case 7:
            inRoom(id);
            break;
        case 8:
            inElevator(id);
            break;
        case 9:
            exit(id);
            break;
        default:
            break;
        }
    }
    return 0;
}

int main(){
    char agent;
    memset(list,0,sizeof(list));
    memset(record,0,sizeof(record));
    memset(room,0,sizeof(room));
    //输入部分
    while (scanf("%c",&agent)!=EOF) 
    {
        if (agent=='.')break;
        scanf("%d",&list[agent-'A'].startTime);
        int r,d;
        while(scanf("%d",&r)!=EOF){
            if(r==0)break;
            Visit temp;
            scanf("%d",&d);
            temp.roomNumber=r;
            temp.duration=d;
            list[agent-'A'].visitList.push_back(temp);
            list[agent-'A'].listAmount++; 
        }
        
    }
    //初始化
    init();

    //计算部分
    
    //输出部分


    return 0;
}
